import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import Banner from "@/components/banner";
import Card from "@/components/card";


import {fetchCoffeeStores} from "@/lib/coffee-store";
import useTrackLocation from "@/hooks/use-track-location";
import {useContext, useEffect, useState} from "react";
import {ACTION_TYPES, StoreContext} from "@/store/store-context";

export async function getStaticProps(context) {
    const coffeeStores = await fetchCoffeeStores()
    return {
        props: {
            coffeeStores: coffeeStores
        }, // will be passed to the page component as props
    };
}

export default function Home(props) {
    const {handleTrackLocation, isFindingLocation, locationErrorMsg} = useTrackLocation()
    const [coffeeStoreError, setCoffeeStoreError] = useState(null)

    const {dispatch, state} = useContext(StoreContext);

    const {latLong, coffeeStores} = state;

    useEffect(() => {
        const fetchCoffeeStoresData = async () => {
            if (latLong) {
                try {
                    const coffeeStores = await fetchCoffeeStores(latLong, 15)
                    dispatch({
                        type: ACTION_TYPES.SET_COFFEE_STORES, payload: {coffeeStores}
                    })
                } catch (e) {
                    setCoffeeStoreError(e.message)
                }
            }
        }

        fetchCoffeeStoresData().then(data => {

        })
    }, [latLong]);

    const handleOnBannerBtnClick = () => {
        handleTrackLocation();
    };

    return (<>
        <Head>
            <title>Coffee Search</title>
            <meta name="description" content="Generated by create next app"/>
            <meta name="viewport" content="width=device-width, initial-scale=1"/>
            <link rel="icon" href="/favicon.ico"/>
        </Head>

        <main className={styles.main}>
            <Banner buttonText={isFindingLocation ? "Locating..." : "View stores nearby"}
                    handleOnClick={handleOnBannerBtnClick}/>
        </main>

        {locationErrorMsg && <p>Something went wrong: {locationErrorMsg}</p>}
        {coffeeStoreError && <p>Something went wrong: {coffeeStoreError}</p>}

        <div className={styles.storesNearMe}>

            {coffeeStores.length > 0 && <>
                <h2 className={styles.heading2}>Stores Near me</h2>
                <div className={styles.cardLayout}>
                    {coffeeStores.map((coffeeStore) => {
                        return (<Card
                            key={coffeeStore.id}
                            name={coffeeStore.name}
                            imgUrl={coffeeStore.imgUrl || "https://images.unsplash.com/photo-1504753793650-d4a2b783c15e?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2000&q=80"}
                            href={`/coffee-store/${coffeeStore.id}`}
                            className={styles.card}
                        />);
                    })}

                </div>
            </>}

            {props.coffeeStores.length > 0 && <>
                <h2 className={styles.heading2}>Random Coffee Stores</h2>
                <div className={styles.cardLayout}>
                    {props.coffeeStores.map((coffeeStore) => {
                        return (<Card
                            key={coffeeStore.id}
                            name={coffeeStore.name}
                            imgUrl={coffeeStore.imgUrl || "https://images.unsplash.com/photo-1504753793650-d4a2b783c15e?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2000&q=80"}
                            href={`/coffee-store/${coffeeStore.id}`}
                            className={styles.card}
                        />);
                    })}

                </div>
            </>}
        </div>
    </>)
}
